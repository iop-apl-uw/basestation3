#
# Seaglider conf file
#
# All non-required command line options specified for glider data
# processing can also be specified in a configuration file.  Required
# options may be overridden with the config file.
#
# The name of the config file is specified with the --config option.  The
# scripts that are invoked in the usual login/logout processing all
# contain --config ~sgXXX/sgXXX.conf.
#
# Generated with python Base.py --generate_sample_conf
#
[base]
#
# basestation log file, records all levels of notifications
#base_log = <path_to_file>
#
# log/display debug messages
#debug = 0
#
# print status messages to stdout
#verbose = 0
#
# don't print status messages to stdout
#quiet = 0
#
# Basestation etc dirctory (master config)
#basestation_etc = <path_to_directory>
#
# Name for the ADCP data file convertor (must be in Sensor sub-directory)
#sc2mat_convertor = sc2mat
#
# Add netcdf files to mission sqlite db
#add_sqlite = 1
#
# glider mission directory
#mission_dir = <path_to_directory>
#
# etc dirctory for a collection of Seagliders
#group_etc = <path_to_directory>
#
# Delete any successfully uploaded input files
#delete_upload_files = 0
#
# compass cal file or search to use most recent version of tcm2mat.cal
#magcalfile = <path_to_file>
#
# compass cal file or search to use most recent version of scicon.tcm
#auxmagcalfile = <path_to_file>
#
# force instrument (glider) id
#instrument_id = 0
#
# processing priority level (niceness)
#nice = 0
#
# gzip netcdf files
#gzip_netcdf = 0
#
# Profiles time to process
#profile = 0
#
# Processes Version 65 glider format
#ver_65 = 0
#
# Width of bins
#bin_width = 1.0
#
# Which half of the profile to use - 1 down, 2 up, 3 both, 4 combine down and up
#which_half = 3
#
# Launch conversion as a daemon process
#daemon = 0
#
# Ignore the lock file, if present
#ignore_lock = 0
#
# Uses the GSW toolbox for all oceanographic calculations.  False uses the seawater toolkit
#use_gsw = 1
#
# Creates per-dive tarballs of processed files - 0 don't create, -1 create, > create fragments of specified size
#divetarballs = 0
#
# Performs no remote operations (no .urls, .pagers, .mailer, etc.)
#local = 0
#
# Clean up (delete) intermediate files from working (mission) directory after processing.
#clean = 0
#
# Optional email address to be inserted into the reply to field email messages
#reply_addr = 
#
# Optional domain name to use for email messages
#domain_name = 
#
# Optional location to prefix file locations in comp email messages
#web_file_location = 
#
# Forces conversion of all dives
#force = 0
#
# Forces reprocessing of a specific dive number 
#reprocess = False
#
# Create the common profile data products
#make_dive_profiles = 1
#
# Create mission profile output file
#make_mission_profile = 0
#
# Create mission timeseries output file
#make_mission_timeseries = 0
#
# Skip running flight model system (FMS) - honor all sg_calib_constants.m variables
#skip_flight_model = 0
#
# Ignore values derived from FlightModel - honor all sg_calib_constants.m variables.  Setting this option implies --skip_flight_model
#ignore_flight_model = 0
#
# Run flight model using potential density (instead of in-situ) and ignore compressibilty and thermal effects
#fm_isopycnal = 0
#
# Back up flight directory prior to run
#backup_flight = 0
#
# Allow FlightModel to reprocess dives when it calculates new parameters
#fm_reprocess_dives = 1
#
# Skip generation of the KML output
#skip_kml = 0
#
# Name of netCDF file to process (only honored when --mission_dir is not specified)
#netcdf_filename = <path_to_file>
#
# For Mission Energy projection, what is the battery reserve
#mission_energy_reserve_percent = 0.15
#
# For Mission Energy projection, how many dives back to fit
#mission_energy_dives_back = 10
#
# For diagnostic change detectors (int P, volmax), ..., how many dives back to fit
#mission_trends_dives_back = 10
#
# Compress the simple netcdf file
#simplencf_compress_output = 0
#
[gliderdac]
#
# GliderDAC base configuration JSON file - common for all Seagliders
#gliderdac_base_config = <path_to_file>
#
# GliderDAC project configuration JSON file - common for single study area
#gliderdac_project_config = <path_to_file>
#
# GliderDAC deployoment configuration JSON file - specific to the current glider deoployment
#gliderdac_deployment_config = <path_to_file>
#
# Directory to place output files in
#gliderdac_directory = <path_to_file>
#
# Generated files for delayed submission
#delayed_submission = <path_to_file>
#
# Width of bins for GliderDAC file (0.0 indicates timeseries)
#gliderdac_bin_width = 0.0
#
# Reduce the output to only non-nan observations (not useful with non-CT data)
#gliderdac_reduce_output = 1
#
[makekml]
#
# Number of points to skip from gliders through the water track
#skip_points = 10
#
# KML color string for color track
#color = 00ffff
#
# What targets to plot
#targets = all
#
# Plot the gliders course as a surface track
#surface_track = 1
#
# Plot the gliders course as a subsurface track
#subsurface_track = 0
#
# Plot the gliders drift track
#drift_track = 1
#
# Use the targets file instead of searching for the latest backup targets file
#proposed_targets = 0
#
# Plot radius circle around targets
#target_radius = 1
#
# Create KMZ output
#compress_output = 1
#
# Plot data from per-dive netcdf files
#plot_dives = 1
#
# Produces a slightly simplified version of the dive track
#simplified = 0
#
# Use the glider's TGT_LAT/TGT_LON/TGT_RADIUS
#use_glider_target = 0
#
# Merge in glider SSH kmz
#merge_ssh = 1
#
[network]
#
# Compressed logfile decompressor path
#network_log_decompressor = <path_to_file>
#
[plotting]
#
# Plot raw tmicl and pmar data,if available
#plot_raw = 0
#
# Save SVG versions of plots (matplotlib output only)
#save_svg = 0
#
# Save PNG versions of plots (plotly output only)
#save_png = 0
#
# Save JPEG versions of plots (plotly output only)
#save_jpg = 0
#
# Save  versions of plots (plotly output only)
#save_webp = 1
#
# Save stand alone html files (plotly output only)
#compress_div = 1
#
# Save stand alone html files (plotly output only)
#full_html = 0
#
# Plot the freezing point in TS diagrams
#plot_freeze_pt = 0
#
# Use glider pressure for legato debug plots
#plot_legato_use_glider_pressure = 0
#
# Override default plot directory location
#plot_directory = <path_to_file>
#
# Maximum value for pmar logavg plots y-range
#pmar_logavg_max = 100.0
#
# Minimum value for pmar logavg plots y-range
#pmar_logavg_min = 0.0001
#
# Rotate the pitch/roll/heading for the adc2p compass output plot
#flip_ad2cp = 1
#
# Which dive plots to produce
#dive_plots = plot_diveplot,plot_COG,plot_CTW,plot_optode,plot_wetlabs,plot_ocr504i,plot_CTD,plot_TS,plot_TMICL,plot_PMAR,plot_compare_aux,plot_compare_auxb,plot_compare_cp,plot_compare_ad2cp,plot_legato_pressure,plot_legato_data,plot_ctd_corrections,plot_vert_vel,plot_pitch_roll,plot_mag,plot_sbe43,
#
# Which mission plots to produce
#mission_plots = mission_energy,mission_volume,mission_motors,mission_int_sensors,mission_depthangle,mission_map,mission_disk,mission_commlog,mission_profiles,mission_callstats,
#
# Which type of plots to generate
#plot_types = dives,mission,
#
[simplenetcdf]
#
# Bin SimpleNetCDF output to this size
#simplencf_bin_width = 0.0
