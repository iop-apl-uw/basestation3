#!/usr/bin/tcsh
## Copyright (c) 2023, 2025  University of Washington.
## 
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are met:
## 
## 1. Redistributions of source code must retain the above copyright notice, this
##    list of conditions and the following disclaimer.
## 
## 2. Redistributions in binary form must reproduce the above copyright notice,
##    this list of conditions and the following disclaimer in the documentation
##    and/or other materials provided with the distribution.
## 
## 3. Neither the name of the University of Washington nor the names of its
##    contributors may be used to endorse or promote products derived from this
##    software without specific prior written permission.
## 
## THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY OF WASHINGTON AND CONTRIBUTORS “AS
## IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
## DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY OF WASHINGTON OR CONTRIBUTORS BE
## LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
## GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
## HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
## LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
## OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# A glider just logged in
# NOTE: Ensure this and the .login file do not contain hidden ^M's or things will fail

umask 2
if( -f .logout ) then
    set path_to_logout = "`pwd`/.logout"
else
    set path_to_logout = "nologout"
endif

if( -l current ) then
    cd current
endif

# Ensure we have a comm.log file
touch comm.log

if(! $?PYTHON_BINARY ) then
    set PYTHON_BINARY = /opt/basestation/bin/python
endif
set runner_timeout = 2
set upload_files_timeout = 5

if(! $?BASESTATION_PATH ) then
    set BASESTATION_PATH = "/usr/local/basestation"
endif

if(! $?GLIDER_OPTIONS ) then
    set GLIDER_OPTIONS = ""
endif

printf "\n" >>! glider_early_gps.log
printf "\n" >>! glider_early_gps.log

set glider_early_gps_time = `date -u +%y%m%d%H%M%S`
set glider_early_gps_cmd_line = "GliderEarlyGPS.py --daemon ${GLIDER_OPTIONS} --mission_dir `pwd` --verbose --base_log `pwd`/glider_early_gps_${glider_early_gps_time} --config `pwd`/${user}.conf --csh_pid $$ --path_to_logout ${path_to_logout}"
set glider_early_gps_log = `pwd`/glider_early_gps.log
if( $?RUNNER_DIR ) then
  set glider_early_gps_run_file = ${RUNNER_DIR}/${glider_early_gps_time}.run
  echo ${HOME} `pwd` ${glider_early_gps_log} ${glider_early_gps_cmd_line} > ${glider_early_gps_run_file}
  set t_now = `date +%s`
  while (-f ${glider_early_gps_run_file} )
      sleep 0.2
      if ( `date +%s` >= ${t_now} + ${runner_timeout}) then
          break
      endif
  end
else
    $PYTHON_BINARY $BASESTATION_PATH/${glider_early_gps_cmd_line} >>&! ${glider_early_gps_log}
endif

if (-f .connected) then
     echo Reconnected at `date -u +"%Y-%m-%dT%H:%M:%SZ"` \(${USER}\) >> comm.log
else
     echo Connected at `date -u +"%Y-%m-%dT%H:%M:%SZ"` \(${USER}\) >> comm.log
endif

rm -f .connected
touch .connected

# If set in the .cshrc (basestation simulators), honor that value for autologout
if( $?AUTOLOGOUT_GLIDER ) then
     # To catch hanging shells
     set autologout=$AUTOLOGOUT_GLIDER
else
     set autologout=3
endif

# Signal the glider what files are waiting for upload
set base_login_time = `date -u +%y%m%d%H%M%S`
set base_login_cmd_line = "BaseLogin.py --mission_dir `pwd` --verbose --base_log `pwd`/baselog_login_${base_login_time} --config `pwd`/${user}.conf"
set base_login_log = `pwd`/baselog.log

if( $?RUNNER_DIR ) then
  set base_login_run_file = ${RUNNER_DIR}/${base_login_time}.run
  echo ${HOME} `pwd` ${base_login_log} ${base_login_cmd_line} > ${base_login_run_file}
  set t_now = `date +%s`
  while (-f ${base_login_run_file} )
      sleep 0.2
      if ( `date +%s` >= ${t_now} + ${runner_timeout}) then
          break
      endif
  end
  # Wait for the file upload_files to be created
  set t_now = `date +%s`
  while ( ! -f upload_files )
      sleep 0.2
      if ( `date +%s` >= ${t_now} + ${upload_files_timeout}) then
          echo ERROR - upload_files timeout at `date -u +"%Y-%m-%dT%H:%M:%SZ"` \(${USER}\) >> comm.log
          break
      endif
  end
else
    $PYTHON_BINARY $BASESTATION_PATH/${base_login_cmd_line}  >>&!  ${base_login_log}
endif
if ( -f upload_files ) then
   source upload_files
   rm -f upload_files
endif

# NOTE: Ensure /usr/local/bin is before /usr/bin
