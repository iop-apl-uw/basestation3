---
# all mission fields optional
# values are inherited from defaults mission
# mission fields: users: [user1,user2], pilotusers: [...], 
#                 groups: [group1,group2], pilotgroups: [...],
#                 started: yyyy-mm-dd, ended: yyyy-mm-dd, planned: yyyy-mm-dd,
#                 orgname: string, orglink: URL, contact: string, email: string",
#                 project: string, link: URL, comment: string, reason: string,
#                 sa: [ ... list of SA links returning JSON ],
#                 kml: [ ... list of links returning KML ],
#                 also: [ ... NNN/mission, NNN/mission (mission optional) ], 
#
# organization details optional
# organization fields: orglink: URL, orgname: string, contact: string, email: string,
#                      text: markdown
#
organization:
 orglink: http://iop.apl.washington.edu
 orgname: Seaglider Public Operations
 contact: IOP Seaglider support team
 email: iopsg@uw.edu
 text: some markdown eventually

# list of marks/objects that can be added to a mission's also: tag
# csv types must have a file of that name in the referring glider's mission directory with extension .csv
# circle radius is in meters
# valid marker shapes are: diamond, square, triangle, triangle-down, arrowhead, arrownarrow, arrow1d, arrowhead-down, circle, star, x
assets:
  A: { type: fixed, lat: 74.5717, lon: -145.6676, marker: circle, color: "#0000ff" }
  B: { type: fixed, lat: 75.4969, lon: -144.1361, marker: square, color: "#0000ff" }
  C: { type: fixed, lat: 76.4129, lon: -142.4220, marker: circle, color: "#ffff00"  }
  # csv file must be name.csv (do not include .csv in file:) and in the glider mission directory
  # data must be t,lat,lon where t is epoch time, lat and lon are decimal degrees
  drifter: { type: csv, marker: triangle, color: "#ff00ff", file: buoypos, tail: 4 }
  # json must return variables named lat and lon (in decimal degrees)
  ship: { type: json, url: url: "/post", method: POST, payload: { url: "https://school.org/getFleetPosition.php", user: guest, password: OurFleetPassword, ssl: false}, marker: triangle, color: "#000000", interval: 120 }
  exclude: { type: circle, center: { lat: 75, lon: -142}, radius: 25000, color: "#ff0000" }
  habitat: { type: polygon, points: [{lat: 74, lon: -140}, {lat: 73, lon: 140}, {lat: 73.5, lon: -142}], color: "#800000" }
  imagery: { type: tileset, url: "https://tiles.server.net/sg/tile/{z}/{x}/{y}" }
  # type image is a single geo-referenced (lower-left, upper-right) image from url: or file: (in glider mission directory)
  image: { type: image, url: "https://enviro.com/sat.png", extents: [34, -132, 37, -130] }
  moorings: { type: group, assets: [ A, B, C ] }


# protections adds additional restrictions to who can access certain API
# endpoints. By default only the /save endpoint is protected - it is only
# available in private and pilot run modes. Format:
#
# url: { mode:[pilot,private,public], groups:[group1, group2, ...], users:[user1user2] }
#
# There are two typical use cases for these types of control 
#   - to change the run modes under which certain endpoints can be 
#     accessed (i.e., to prevent all access to selftest, raw file, or 
#     download endpoints when running as a public server)
#   - to give only a certain group of users access to these endpoints,
#     independently of the per mission controls. A "download" user could
#     be created and raw data API endpoints could be restricted to that
#     user, or only users in a "downloads" group 
#
# Protections are checked first at the endpoint level and then at the
# the mission level. All checks must pass (a user or user's assigned groups
# must be appropriately credentialed at both endpoint and mission levels
# if both are specified)
#
# Endpoints /auth, /GLIDERNUM,  /, and /missions (used by /), cannot be 
# protected in this way. Protected missions and gliders will not be 
# available on those pages of course, but the assumption is that those 
# pages will always be available if only to provide a login page.
#
# default values, specified with the defaults: key, will
# be applied to all protectable endpoints, whether or not
# they are specified herein.
# 
# To create a completely protected site, add a groups to defaults here
# and in defaults under missions.
# 
endpoints:
 defaults: { groups:[basic] }
 selftest: { modes:[pilot,private], groups:[pilots] }
 save: { modes: [private] } # no save API endpoint in pilot mode this way

# defaults applied to all missions if not elsewhere spec'd
defaults: { link: http://iop.apl.washington.edu }
# defaults applied to all missions when running in pilot mode
pilotdefaults: { pilotgroups: [analysts] }

missiondefaults:
   Experiment_May24: { planned: 2023-07-30, link: https://experimentprojectpage.org }

# 4 sets of defaults can be specified: defaults (fallback)
# privatedefaltis, pilotdefaults, and publicdefaults corresponding to
# the different run modes. If a value is specified for a mission it
# is always used, else use values from run mode specific defaults,
# else use any values specified in defaults. Values not specified
# anywhere will be left empty - no defaults are provided in the code. 
#
# A mission can also have its own endpoint specific restrictions.
# Format is the same as for the endpoints section above:
#
# - { glider: 249, endpoints: { data: { users: [collaborator] } } }
#
# using whatever YAML {}/block or separate line style you prefer
#
missions:
# we don't specify private defaults - if we add pilots or pilotusers
# to privatedefaults then we must auth as pilot for every mission,
# which would mean we were running as in pilot mode
#
# now the actual missions
 - { glider: 249, mission: Experiment_May24, path: sg249, also: [ {asset: moorings} ] }
 - { glider: 242, mission: Experiment_May24, path: sg242, also: [ {glider: 249} ] }
 - { glider: 236, mission: Experiment_May24, path: sg236, also: [ {glider: [249,241]}, {glider: 233, mission: Experiment_Jun24}, {asset: habitat} ] }
 - { glider: 233, mission: Experiment_Jun24, path: sg234, also: [ {glider: [236, 249, 242], mission: Experiment_May24}, {asset: habitat} ] }
 - { glider: 241, Mission: DeepSeaEx_23, path: sg241, also: [ {asset: exclude}, {asset: A} ] }
 - 
    glider:180
    path: sg180/SMODE_Aug22
    mission: SMODE_Aug22
    users:[fred]
    groups: [guest]
    pilotgroups: [  iop,    analysts] 
    link: http://seaglider.pub
    comment: "this is a comment" 
    started: 2022-08-27
    ended: 2022-10-30
    reason: "mission complete" 
    status: complete
 - { glider: 219, path: sg129/SMODE_Aug22, mission: SMODE_Aug22, status: complete }
 - { glider: 220, path: sg129/SMODE_Aug22, mission: SMODE_Aug22, status: complete }
 - { glider: 237, path: sg129/SMODE_Aug22, mission: SMODE_Aug22, status: complete }
 - { glider: 247, path: sg129/SMODE_Aug22, mission: SMODE_Aug22, status: complete }
 - { glider: 248, path: sg129/SMODE_Oct22, mission: SMODE_Oct22, status: active }
